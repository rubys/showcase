#!/usr/bin/env ruby

require 'bundler/setup'
require 'open3'

# Check arguments
if ARGV.length != 2
  puts "Usage: #{$0} USERNAME PASSWORD"
  puts
  puts "Updates the htpasswd file with a new password for the specified user."
  puts "Does not modify index.sqlite3 database."
  exit 1
end

username = ARGV[0]
password = ARGV[1]

# Validate username
if username.empty? || username.include?(':')
  puts "Error: Invalid username"
  exit 1
end

# Generate Apache MD5 hash using openssl
# This generates an $apr1$ hash which is compatible with Apache htpasswd
stdout, stderr, status = Open3.capture3('openssl', 'passwd', '-apr1', password)
if status.success?
  hash = "#{username}:#{stdout.strip}"
else
  puts "Error: Failed to generate password hash"
  puts stderr
  exit 1
end

# Determine htpasswd file location
git_path = File.realpath(File.expand_path('..', __dir__))
ENV["RAILS_DB_VOLUME"] = "/data/db" if Dir.exist?("/data/db")
dbpath = ENV.fetch('RAILS_DB_VOLUME') { "#{git_path}/db" }
htpasswd_file = "#{dbpath}/htpasswd"

# Read existing htpasswd file
lines = []
if File.exist?(htpasswd_file)
  lines = File.readlines(htpasswd_file).map(&:strip)
end

# Update or add the user
user_found = false
lines.map! do |line|
  if line.start_with?("#{username}:")
    user_found = true
    hash
  else
    line
  end
end

# Add new user if not found
lines << hash unless user_found

# Write updated htpasswd file
File.write(htpasswd_file, lines.join("\n") + "\n")

puts "Password updated for user: #{username}"
puts "htpasswd file: #{htpasswd_file}"

# Send HUP signal to navigator to reload
if system('pgrep -x navigator > /dev/null 2>&1')
  system('pkill -HUP navigator')
  puts "Sent HUP signal to navigator to reload configuration"
end
