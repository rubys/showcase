#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

ENV['RAILS_ENV'] = 'production'

# Default settings
port = 9999
use_maintenance = false
navigator_cmd = "navigator/bin/navigator-refactored"
config_file = ""

# Parse command line options
OptionParser.new do |opts|
  opts.banner = "Usage: nav [options]"

  opts.on("-l", "--legacy", "Use navigator-legacy instead of navigator-refactored") do
    navigator_cmd = "navigator/bin/navigator-legacy"
  end

  opts.on("-r", "--refactored", "Use navigator-refactored instead of navigator-legacy") do
    navigator_cmd = "navigator/bin/navigator-refactored"
  end

  opts.on("-m", "--maintenance", "Use config/navigator-maintenance.yml") do
    use_maintenance = true
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

# Build navigator if needed
latest_go_mtime = Dir.glob("navigator/**/*.go").map { |f| File.mtime(f) }.max
if !File.exist?(navigator_cmd) || File.mtime(navigator_cmd) < latest_go_mtime
  puts "Building navigator..."
  Dir.chdir('navigator') do
      system("make")
  end
end

# Set config file
if use_maintenance
  config_file = "config/navigator-maintenance.yml"
  port = 3000
else
  config_file = "config/navigator.yml"
end

# Kill any existing process on the port
if system("lsof -i :#{port} -t >/dev/null 2>&1")
  pids = `lsof -i :#{port} -t`.strip.split("\n")
  pids.each { |pid| Process.kill("INT", pid.to_i) } unless pids.empty?
  sleep 1
end

# Ensure assets are precompiled
unless File.directory?("public/assets")
  system("bin/rails assets:precompile")
end

# Ensure docs are prerendered
unless File.directory?("public/docs")
  system("bin/prerender")
end

# Generate config if needed or outdated
if !File.exist?(config_file) || (File.exist?("db/index.sqlite3") && File.mtime("db/index.sqlite3") > File.mtime(config_file))
  unless use_maintenance
    system("bin/rails nav:config")
  end
end

# Open browser
Thread.new do
  sleep 0.5
  system("open -a Firefox http://localhost:#{port}")
end

# Run navigator
if File.exist?(config_file)
  system(navigator_cmd, config_file)
else
  system(navigator_cmd)
end