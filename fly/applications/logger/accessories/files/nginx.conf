events {
    worker_connections 1024;
}

http {
    # Enable persistent connections to backend
    upstream vector_backend {
        server logger-vector:8080;
        keepalive 32;  # Keep up to 32 idle connections
    }

    server {
        listen 9000 ssl http2;
        
        # Certificate paths (generated at startup)
        ssl_certificate /etc/nginx/certs/self-signed.crt;
        ssl_certificate_key /etc/nginx/certs/self-signed.key;
        
        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers off;
        
        # Enable HTTP/2
        http2_push_preload on;
        
        location / {
            proxy_pass http://vector_backend;
            proxy_http_version 1.1;
            
            # Keep backend connections alive
            proxy_set_header Connection "";
            proxy_socket_keepalive on;
            
            # Pass through headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Pass through Authorization header for Vector auth
            proxy_set_header Authorization $http_authorization;
            
            # Timeouts for logging connections
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings for log data
            proxy_buffering off;
            proxy_request_buffering off;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }
}