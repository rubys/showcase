#!/usr/bin/env bash -e

# Handle --kill option
if [[ "$1" == "--kill" ]]; then
  echo "Killing existing puma server on port 3000..."
  
  # Kill any process listening on port 3000
  if command -v lsof &> /dev/null; then
    pids=$(lsof -ti :3000 2>/dev/null || true)
    if [[ -n "$pids" ]]; then
      echo "Killing processes on port 3000: $pids"
      kill -9 $pids 2>/dev/null || true
    fi
  fi
  
  # Remove the PID file
  if [[ -f tmp/pids/server.pid ]]; then
    echo "Removing tmp/pids/server.pid"
    rm -f tmp/pids/server.pid
  fi
  
  echo "Done."
  exit 0
fi

if ! command -v foreman &> /dev/null
then
  echo "Installing foreman..."
  gem install foreman
fi

test -e public/assets && bin/rake assets:clobber
test -e public/docs && bin/rails prerender:clobber
test -e public/studios && bin/rails prerender:clobber
test -e public/regions && bin/rails prerender:clobber

if [[ $# -gt 0 ]]; then
  DIR="$( dirname -- "${BASH_SOURCE[0]}"; )";   # Get the directory name
  DIR="$( readlink -f "$DIR"; )";    # Resolve its full path if need be
  BASE="$(realpath $DIR/..)"

  export RAILS_APP_DB=$(basename -s .sqlite3 $1)
  export RAILS_STORAGE=$BASE/storage/

  if [[ $# -gt 1 ]]; then
    if [[ $2 =~ ^[0-9][-0-9]+$ ]]; then
      scp rubymini:git/showcase/db/backup/$2/$RAILS_APP_DB.sqlite3.gz ~/tmp/$RAILS_APP_DB.sqlite3.in.gz
      rm -f ~/tmp/$RAILS_APP_DB.sqlite3.in
      gzip -d ~/tmp/$RAILS_APP_DB.sqlite3.in.gz
      mv ~/git/showcase/db/$RAILS_APP_DB.sqlite3 ~/tmp
      sqlite3 ~/git/showcase/db/$RAILS_APP_DB.sqlite3 < ~/tmp/$RAILS_APP_DB.sqlite3.in
    else
      export HTTP_X_REMOTE_USER=$2
    fi
  fi

  if [[ "$1" = "test" ]]; then
    export RAILS_ENV=test
    bin/rails db:prepare db:fixtures:load
  elif [[ "$1" = "demo" ]]; then
    rm -f db/demo.sqlite3
    bin/rails db:prepare db:seed
  fi
fi

foreman start -f Procfile.dev
