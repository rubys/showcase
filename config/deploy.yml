# Name of your application. Used to uniquely configure containers.
service: showcase

# Name of the container image.
image: samruby/showcase

# Deploy to these servers.
servers:
  web:
    - 65.109.81.136
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption. 
proxy: 
  ssl: true
  host: showcase.party

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: samruby

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  context: .
  arch: amd64
  remote: ssh://root@65.109.81.136
  local: false
  # Build args for deployment target (controls server warnings in pre-rendered pages)
  # Hetzner uses RAILS_PROXY_HOST for both build and runtime
  args:
    FLY_APP_NAME: ""
    FLY_REGION: ""
    RAILS_PROXY_HOST: "hetzner.intertwingly.net"

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
# env:
#   clear:
#     DB_HOST: 192.168.0.2
#   secret:
#     - RAILS_MASTER_KEY
env:
  clear:
    KAMAL_HETZNER: 1
    RAILS_PROXY_HOST: "hetzner.intertwingly.net"
  secret:
    - RAILS_MASTER_KEY
    - AWS_ACCESS_KEY_ID
    - AWS_ENDPOINT_URL_S3
    - AWS_REGION
    - AWS_SECRET_ACCESS_KEY
    - BUCKET_NAME

# Configure logging
logging:
  driver: local
  options:
    max-size: 20m
    max-file: 5

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"
aliases:
  console: app exec --interactive --reuse "bash"
  apps: server exec docker exec kamal-proxy kamal-proxy list

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"
volumes:
  - /home/rubys/db:/data/db
  - /home/rubys/log:/data/log
  - /home/rubys/storage:/data/storage

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data

############################################################################
#
# To deploy a replica:
#   * Obtain a VPS/dedicated server; install Ubuntu; add rsync
#   * Install any necessary ssh authorized_keys
#   * Rsync volumes from existing host
#   * Create an "A" DNS record with a new name
#   * Update servers.web and proxy.host with ip addr and dns name
#   * kamal server setup
#   * VERSION=latest kamal deploy -P
